{"version":3,"sources":["components/TrayItem.jsx","components/Nodes.jsx","components/App.jsx","index.js"],"names":["TrayItem","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_this2","react","mdbreact","outline","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","React","Nodes","layersTypesToNodes","Core","Convolutional","Pooling","Locally-Connected","Recurrent","Embedding","Merge","Activation","Normalization","Noise","layerTypeToColor","layerTypes","keys","panelCards","i","length","layerType","layerColorHex","kerasNodes","nodes","j","toLowerCase","indexOf","search","push","TrayItem_TrayItem","type","color","border","style","marginTop","className","Array","prototype","insert","index","item","splice","App","diagramEngine","SRD","argsPanel","selectedNode","undefined","installDefaultFactories","handleClick","bind","assertThisInitialized","handleSearch","handleChange","getArgOptions","toggle","diagramModel","nodeIds","nodeProperties","node","property","args","edges","links","edgeIds","fixedEdges","src","dst","targetPort","sourcePort","label","parent","id","nodeProps","setState","target","e","selectedNodes","document","getElementsByClassName","nodeId","getAttribute","updatedSelectedNode","description","fieldsWithOptions","argsOptions","discreteOptionField","options","field","argFields","selectedNodeArgs","content","arg","onChange","required","inputType","placement","tooltipContent","onClick","left","waves","placeholder","right","$","ajax","url","dataType","data","compileGraph","Nodes_Nodes","onDrop","parse","getData","DefaultNodeModel","addInPort","addOutPort","points","getRelativeMousePoint","argDescriptions","layersToArgs","argsToDefault","layersToArgDefaults","defaultValue","x","y","getDiagramModel","addNode","forceUpdate","onDragOver","preventDefault","main","isOpen","fullHeight","position","md","ReactDOM","render","App_App","getElementById"],"mappings":"o+2EAGaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,EADrB,OAAAC,OAAAO,EAAA,EAAAP,CAAAJ,EAAAC,GAAAG,OAAAQ,EAAA,EAAAR,CAAAJ,EAAA,EAAAa,IAAA,SAAAC,MAAA,WAMW,IAAAC,EAAAT,KACP,OACEU,EAAA,cAACC,EAAA,OAAD,CAAQC,SAAO,EACbC,WAAW,EACXC,YAAa,SAAAC,GACXA,EAAMC,aAAaC,QAAQ,qBAAsBC,KAAKC,UAAUV,EAAKb,MAAMwB,UAG5EpB,KAAKJ,MAAMyB,UAdpB3B,EAAA,CAA8B4B,aCIjBC,EAAb,SAAA5B,GACE,SAAA4B,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,EADrB,OAAAC,OAAAO,EAAA,EAAAP,CAAAyB,EAAA5B,GAAAG,OAAAQ,EAAA,EAAAR,CAAAyB,EAAA,EAAAhB,IAAA,SAAAC,MAAA,WAqHI,IA9GA,IAAMgB,EAAqB,CACzBC,KAAS,CACP,QACA,aACA,UACA,UACA,QACA,UACA,UACA,eACA,SACA,yBACA,UACA,mBACA,mBACA,oBAEDC,cAAkB,CACjB,SACA,SACA,SACA,kBACA,kBACA,kBACA,kBACA,kBACA,aACA,aACA,aACA,eACA,eACA,eACA,gBACA,gBACA,iBAEDC,QAAY,CACX,eACA,eACA,eACA,mBACA,mBACA,mBACA,qBACA,qBACA,qBACA,yBACA,yBACA,0BAEDC,oBAAsB,CACrB,qBACA,sBAEDC,UAAc,CACb,MACA,YACA,gBACA,MACA,UACA,OACA,WACA,aACA,WACA,aAEDC,UAAc,CACb,aAEDC,MAAU,CACT,MACA,WACA,WACA,UACA,UACA,cACA,OAEDC,WAAe,CACd,YACA,QACA,OACA,MACA,kBACA,WAEDC,cAAkB,CACjB,sBAEDC,MAAU,CACT,gBACA,kBACA,iBAIAC,EAAmB,CACrBV,KAAS,CAAC,SAAU,WACpBC,cAAkB,CAAC,UAAW,WAC9BC,QAAY,CAAC,UAAW,WACxBC,oBAAsB,CAAC,OAAQ,WAC/BC,UAAc,CAAC,UAAW,WAC1BC,UAAc,CAAC,UAAW,WAC1BC,MAAU,CAAC,YAAa,WACxBC,WAAe,CAAC,UAAW,WAC3BC,cAAkB,CAAC,UAAW,WAC9BC,MAAU,CAAC,SAAU,YAEnBE,EAAatC,OAAOuC,KAAKb,GACzBc,EAAa,GACRC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IAAK,CAQ1C,IAPA,IAAIE,EAAYL,EAAWG,GAEvBG,EAAgBP,EAAiBM,GAAW,GAE5CE,EAAanB,EAAmBiB,GAChCG,EAAQ,GAEHC,EAAI,EAAGA,EAAIF,EAAWH,OAAQK,KACyC,IAA1EF,EAAWE,GAAGC,cAAcC,QAAQ/C,KAAKJ,MAAMoD,OAAOF,iBACxDF,EAAMK,KAAKvC,EAAA,cAACwC,EAAD,CACT9B,MAAO,CAAE+B,KAAM,QAASC,MAAOV,EAAerB,KAAMsB,EAAWE,IAC/DxB,KAAOsB,EAAWE,MACpBD,EAAMK,KAAKvC,EAAA,2BAGXkC,EAAMJ,OAAS,GACjBF,EAAWW,KACTvC,EAAA,cAACC,EAAA,QAAD,CACEyC,MAAM,oBACNC,OAlBW,SAmBXC,MAAO,CAAEC,UAAW,QACpBC,UAAU,eAEV9C,EAAA,cAACC,EAAA,cAAD,CAAeyC,MApBH,gBAoByBX,EAArC,WACA/B,EAAA,cAACC,EAAA,YAAD,SAAeiC,EAAf,OAMR,OACElC,EAAA,qBAAK8C,UAAU,oBACXlB,OAtJVf,EAAA,CAA2BD,0ECiB3BmC,MAAMC,UAAUC,OAAS,SAAUC,EAAOC,GACxC7D,KAAK8D,OAAOF,EAAO,EAAGC,IAGjB,IAAME,EAAb,SAAApE,GACE,SAAAoE,EAAYnE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+D,IACjBlE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiE,GAAA5D,KAAAH,KAAMJ,KACDQ,MAAQ,CACX4C,OAAQ,GACRgB,cAAe,IAAIC,gBAEnBC,WAAW,EACXC,kBAAcC,GAEhBvE,EAAKO,MAAM4D,cAAcK,0BAEzBxE,EAAKyE,YAAczE,EAAKyE,YAAYC,KAAjBzE,OAAA0E,EAAA,EAAA1E,QAAA0E,EAAA,EAAA1E,CAAAD,KACnBA,EAAK4E,aAAe5E,EAAK4E,aAAaF,KAAlBzE,OAAA0E,EAAA,EAAA1E,QAAA0E,EAAA,EAAA1E,CAAAD,KACpBA,EAAK6E,aAAe7E,EAAK6E,aAAaH,KAAlBzE,OAAA0E,EAAA,EAAA1E,QAAA0E,EAAA,EAAA1E,CAAAD,KACpBA,EAAK8E,cAAgB9E,EAAK8E,cAAcJ,KAAnBzE,OAAA0E,EAAA,EAAA1E,QAAA0E,EAAA,EAAA1E,CAAAD,KACrBA,EAAK+E,OAAS/E,EAAK+E,OAAOL,KAAZzE,OAAA0E,EAAA,EAAA1E,QAAA0E,EAAA,EAAA1E,CAAAD,KAfGA,EADrB,OAAAC,OAAAO,EAAA,EAAAP,CAAAiE,EAAApE,GAAAG,OAAAQ,EAAA,EAAAR,CAAAiE,EAAA,EAAAxD,IAAA,eAAAC,MAAA,WAwBI,IAJA,IAAIoC,EAAQ5C,KAAKI,MAAM4D,cAAca,aAAajC,MAC9CkC,EAAUhF,OAAOuC,KAAKO,GAEtBmC,EAAiB,GACZxC,EAAI,EAAGA,EAAIuC,EAAQtC,OAAQD,IAAK,CACvC,IAAIyC,EAAOpC,EAAMkC,EAAQvC,IACrB0C,EAAW,CACb5D,KAAO2D,EAAK3D,KACZ6D,KAAOF,EAAKE,MAGdH,EAAe9B,KAAKgC,GAGtB,IAAIE,EAAQnF,KAAKI,MAAM4D,cAAca,aAAaO,MAC9CC,EAAUvF,OAAOuC,KAAK8C,GACtBG,EAAa,GACjB,IAAK/C,EAAI,EAAGA,EAAI8C,EAAQ7C,OAAQD,IAAK,CAOnC,IACIgD,EAAKC,EANT,GAAoC,MAAhCL,EAAME,EAAQ9C,IAAIkD,WAOL,OAFFN,EAAME,EAAQ9C,IAAImD,WAAWC,OAG1CJ,EAAMJ,EAAME,EAAQ9C,IAAImD,WAAWE,OAAOC,GAC1CL,EAAML,EAAME,EAAQ9C,IAAIkD,WAAWG,OAAOC,KAE1CN,EAAMJ,EAAME,EAAQ9C,IAAIkD,WAAWG,OAAOC,GAC1CL,EAAML,EAAME,EAAQ9C,IAAImD,WAAWE,OAAOC,IAG5CP,EAAWrC,KAAK,CAACsC,EAAKC,IAQxB,MALY,CACV5C,MAAQkC,EACRgB,UAAYf,EACZI,MAAQG,KA5Dd,CAAA/E,IAAA,SAAAC,MAAA,WAkEIR,KAAK+F,SAAS,CACZ5B,kBAAcC,EACdF,WAAYlE,KAAKI,MAAM8D,cApE7B,CAAA3D,IAAA,eAAAC,MAAA,SAwEeO,GACXf,KAAK+F,SAAS,CAAC/C,OAAQjC,EAAMiF,OAAOxF,UAzExC,CAAAD,IAAA,cAAAC,MAAA,SA4EcyF,GAEV,IAAIC,EAAgBC,SAASC,uBAAuB,sBACpD,GAA6B,IAAzBF,EAAc1D,aACe4B,GAA3BpE,KAAKI,MAAM+D,aAA2B,CACxC,IAAIkC,EAASH,EAAc,GAAGI,aAAa,eACvCtB,EAAOhF,KAAKI,MAAM4D,cAAca,aAAajC,MAAMyD,GACvDrG,KAAK+F,SAAS,CACZ5B,aAAea,EACfd,WAAY,OArFtB,CAAA3D,IAAA,eAAAC,MAAA,SA2FeO,GACX,IAAIwF,EAAsBvG,KAAKI,MAAM+D,aACrCoC,EAAoBrB,KAAKnE,EAAMiF,OAAO3E,MAAMb,MAAQO,EAAMiF,OAAOxF,MACjER,KAAK+F,SAAS,CAAE5B,aAAeoC,MA9FnC,CAAAhG,IAAA,gBAAAC,MAAA,SAiGgBgG,GAIZ,IAHA,IAAIC,EAAoB3G,OAAOuC,KAAKqE,GAChCC,GAAsB,EACtBC,EAAU,GACL/D,EAAI,EAAGA,EAAI4D,EAAkBjE,OAAQK,IAAK,CACjD,IAAIgE,EAAQJ,EAAkB5D,GAO9B,IALyC,IADlB2D,EAAY1D,cACdC,QAAQ8D,KAC3BD,EAAU9G,OAAOuC,KAAKqE,EAAYG,IAClCF,GAAsB,GAGpBA,EACF,MAGJ,OAAOC,IAjHX,CAAArG,IAAA,SAAAC,MAAA,WAoHW,IAAAC,EAAAT,KACH8G,EAAY,GAChB,QAAgC1C,IAA5BpE,KAAKI,MAAM+D,aAEb,IADA,IAAI4C,EAAmBjH,OAAOuC,KAAKrC,KAAKI,MAAM+D,aAAae,MAClD3C,EAAI,EAAGA,EAAIwE,EAAiBvE,OAAQD,IAAK,CAChD,IAIIyE,EAJAC,EAAMjH,KAAKI,MAAM+D,aAAae,KAAK6B,EAAiBxE,IAEhCzC,OAAOuC,KAAKqE,GAIpC,GAAIO,EAAIL,QAAQpE,OAAS,EAAG,CAE1B,IADA,IAAIoE,EAAU,GACL/D,EAAI,EAAGA,EAAIoE,EAAIL,QAAQpE,OAAQK,IACtC+D,EAAQ3D,KAAKvC,EAAA,wBAAQF,MAAQyG,EAAIL,QAAQ/D,IAAOoE,EAAIL,QAAQ/D,KAG9DmE,EAAUtG,EAAA,wBACNW,KAAO0F,EAAiBxE,GACxB/B,MAAQyG,EAAIzG,MACZ0G,SAAWlH,KAAK0E,aAChByC,SAAWF,EAAIE,UACfP,OAEC,CACL,IAAIQ,EAAY,QACyB,GAArCH,EAAIT,YAAYzD,QAAQ,WACe,GAAvCkE,EAAIT,YAAYzD,QAAQ,aACc,GAAtCkE,EAAIT,YAAYzD,QAAQ,YAC1BqE,EAAY,UAEdJ,EAAUtG,EAAA,uBACRyC,KAAOiE,EACP/F,KAAO0F,EAAiBxE,GACxB/B,MAAQyG,EAAIzG,MACZ0G,SAAWlH,KAAK0E,aAChByC,UAAW,IAGfL,EAAU7D,KAAKvC,EAAA,yBACXA,EAAA,cAACC,EAAA,WAAD,CACE0G,UAAU,SACVC,eAAiBL,EAAIT,aACnBO,EAAiBxE,GAHrB,MAG8ByE,EAH9B,IAGwCtG,EAAA,4BAMhD,OACEA,EAAA,qBAAK6G,QAASvH,KAAKsE,aACjB5D,EAAA,cAACC,EAAA,OAAD,CAAQyC,MAAM,qBACZ1C,EAAA,cAACC,EAAA,YAAD,KACED,EAAA,wBAAQ8C,UAAU,cAAlB,gBAGF9C,EAAA,cAACC,EAAA,UAAD,CAAW6G,MAAI,GACb9G,EAAA,cAACC,EAAA,QAAD,KACED,EAAA,cAACC,EAAA,WAAD,CAAY8G,OAAK,GACf/G,EAAA,qBAAK8C,UAAU,gBACb9C,EAAA,uBACE8C,UAAU,uBACVkE,YAAY,SACZlH,MAAOR,KAAKI,MAAM4C,OAClBG,KAAK,OACL+D,SAAUlH,KAAKyE,mBAMzB/D,EAAA,cAACC,EAAA,UAAD,CAAWgH,OAAK,GACdjH,EAAA,cAACC,EAAA,QAAD,KACED,EAAA,cAACC,EAAA,OAAD,CAAQC,SAAO,EAAC2G,QAAS,WACvBK,IAAEC,KAAK,CACLC,IAAI,UACJ3E,KAAM,OACN4E,SAAU,OACVC,KAAM9G,KAAKC,UAAUV,EAAKwH,oBAL9B,WAWAvH,EAAA,cAACC,EAAA,OAAD,CAAQC,SAAO,GAAf,iBAKNF,EAAA,qBAAK8C,UAAU,QACb9C,EAAA,qBAAK8C,UAAU,WACb9C,EAAA,cAACwH,EAAD,CAAOlF,OAAShD,KAAKI,MAAM4C,SAC3BtC,EAAA,qBACE8C,UAAU,gBACV2E,OAAQ,SAAApH,GACN,IAAIiH,EAAO9G,KAAKkH,MAAMrH,EAAMC,aAAaqH,QAAQ,uBAC7CrD,EAAO,IAAIsD,mBAAiBN,EAAK3G,KAAM2G,EAAK5E,OAC9B,OAAd4E,EAAK7E,KACP6B,EAAKuD,UAAU,MACQ,QAAdP,EAAK7E,KACd6B,EAAKwD,WAAW,QAEhBxD,EAAKuD,UAAU,MACfvD,EAAKwD,WAAW,QAGlB,IAAIC,EAAShI,EAAKL,MAAM4D,cAAc0E,sBAAsB3H,GAExD4H,EAAkBC,EAAaZ,EAAK3G,MACpCwH,EAAgBC,EAAoBd,EAAK3G,MACzC6D,EAAOpF,OAAOuC,KAAKwG,GAEvB7D,EAAKE,KAAO,GAGZ,IAAK,IAAI3C,EAAI,EAAGA,EAAI2C,EAAK1C,OAAQD,IAAK,CACpC,IAAI0E,EAAM/B,EAAK3C,GACXiE,EAAcmC,EAAgB1B,GAE9B8B,EAAeF,EAAc5B,GAC7BL,EAAUnG,EAAKkE,cAAc6B,GAEb,QAAhBuC,GACFnC,EAAQjD,OAAO,EAAGoF,GAGpB/D,EAAKE,KAAK+B,GAAO,CACfT,YAAaA,EACbW,SAA0B,IAAhB4B,EACVvI,MAAOuI,EACPnC,QAASA,GAIb5B,EAAKgE,EAAIP,EAAOO,EAChBhE,EAAKiE,EAAIR,EAAOQ,EAChBxI,EAAKL,MAAM4D,cACRkF,kBACAC,QAAQnE,GACXvE,EAAK2I,eAEPC,WAAY,SAAAtI,GACVA,EAAMuI,mBAGR5I,EAAA,cAAC6I,EAAA,cAAD,CAAe/F,UAAU,kBAAkBQ,cAAehE,KAAKI,MAAM4D,mBAK3EtD,EAAA,cAACC,EAAA,MAAD,CAAO6I,OAASxJ,KAAKI,MAAM8D,UAAYU,OAAQ,kBAAMnE,EAAKmE,UAAU6E,YAAU,EAACC,SAAS,SACtFhJ,EAAA,cAACC,EAAA,OAAD,KACED,EAAA,cAACC,EAAA,OAAD,CAAQgJ,GAAG,MACTjJ,EAAA,cAACC,EAAA,QAAD,KACED,EAAA,cAACC,EAAA,YAAD,KACED,EAAA,0BACEA,EAAA,qBAAK8C,UAAU,aACXsD,KAKRpG,EAAA,cAACC,EAAA,eAAD,KACED,EAAA,cAACC,EAAA,OAAD,CAAQ6C,UAAU,QAAlB,UACA9C,EAAA,cAACC,EAAA,OAAD,CAAQ6C,UAAU,OAAO+D,QAAUvH,KAAK4E,QAAxC,qBAxRlBb,EAAA,CAAyBzC,mBCrBzBsI,IAASC,OAAOnJ,EAAA,cAACoJ,EAAD,MAAS3D,SAAS4D,eAAe","file":"static/js/main.840763a2.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { MDBBtn } from \"mdbreact\";\n\nexport class TrayItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <MDBBtn outline\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n        }}\n      >\n        {this.props.name}\n      </MDBBtn>\n    );\n  }\n}\n","import * as React from \"react\";\r\nimport { TrayItem } from \"./TrayItem\";\r\nimport { MDBCard, MDBCardHeader, MDBCardBody } from \"mdbreact\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Nodes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const layersTypesToNodes = {\r\n      \"Core\" : [\r\n        \"Dense\",\r\n        \"Activation\",\r\n        \"Dropout\",\r\n        \"Flatten\",\r\n        \"Input\",\r\n        \"Reshape\",\r\n        \"Permute\",\r\n        \"RepeatVector\",\r\n        \"Lambda\",\r\n        \"ActivityRegularization\",\r\n        \"Masking\",\r\n        \"SpatialDropout1D\",\r\n        \"SpatialDropout2D\",\r\n        \"SpatialDropout3D\"\r\n      ],\r\n       \"Convolutional\" : [\r\n        \"Conv1D\",\r\n        \"Conv2D\",\r\n        \"Conv3D\",\r\n        \"SeparableConv1D\",\r\n        \"SeparableConv2D\",\r\n        \"DepthwiseConv2D\",\r\n        \"Conv2DTranspose\",\r\n        \"Conv3DTranspose\",\r\n        \"Cropping1D\",\r\n        \"Cropping2D\",\r\n        \"Cropping3D\",\r\n        \"UpSampling1D\",\r\n        \"UpSampling2D\",\r\n        \"UpSampling3D\",\r\n        \"ZeroPadding1D\",\r\n        \"ZeroPadding2D\",\r\n        \"ZeroPadding3D\"\r\n      ],\r\n       \"Pooling\" : [\r\n        \"MaxPooling1D\",\r\n        \"MaxPooling2D\",\r\n        \"MaxPooling3D\",\r\n        \"AveragePooling1D\",\r\n        \"AveragePooling2D\",\r\n        \"AveragePooling3D\",\r\n        \"GlobalMaxPooling1D\",\r\n        \"GlobalMaxPooling2D\",\r\n        \"GlobalMaxPooling3D\",\r\n        \"GlobalAveragePooling1D\",\r\n        \"GlobalAveragePooling2D\",\r\n        \"GlobalAveragePooling3D\"\r\n      ],\r\n       \"Locally-Connected\" : [\r\n        \"LocallyConnected1D\",\r\n        \"LocallyConnected2D\"\r\n      ],\r\n       \"Recurrent\" : [\r\n        \"RNN\",\r\n        \"SimpleRNN\",\r\n        \"SimpleRNNCell\",\r\n        \"GRU\",\r\n        \"GRUCell\",\r\n        \"LSTM\",\r\n        \"LSTMCell\",\r\n        \"ConvLSTM2D\",\r\n        \"CuDNNGRU\",\r\n        \"CuDNNLSTM\"\r\n      ],\r\n       \"Embedding\" : [\r\n        \"Embedding\"\r\n      ],\r\n       \"Merge\" : [\r\n        \"Add\",\r\n        \"Subtract\",\r\n        \"Multiply\",\r\n        \"Average\",\r\n        \"Maximum\",\r\n        \"Concatenate\",\r\n        \"Dot\"\r\n      ],\r\n       \"Activation\" : [\r\n        \"LeakyReLU\",\r\n        \"PReLU\",\r\n        \"ReLU\",\r\n        \"ELU\",\r\n        \"ThresholdedReLU\",\r\n        \"Softmax\"\r\n      ],\r\n       \"Normalization\" : [\r\n        \"BatchNormalization\"\r\n      ],\r\n       \"Noise\" : [\r\n        \"GaussianNoise\",\r\n        \"GaussianDropout\",\r\n        \"AlphaDropout\"\r\n      ]\r\n    }\r\n\r\n    var layerTypeToColor = {\r\n      \"Core\" : [\"danger\", \"#ff4444\"],\r\n      \"Convolutional\" : [\"warning\", \"#ffbb33\"],\r\n      \"Pooling\" : [\"success\", \"#00C851\"],\r\n      \"Locally-Connected\" : [\"info\", \"#33b5e5\"],\r\n      \"Recurrent\" : [\"default\", \"#2BBBAD\"],\r\n      \"Embedding\" : [\"primary\", \"#4285F4\"],\r\n      \"Merge\" : [\"secondary\", \"#aa66cc\"],\r\n      \"Activation\" : [\"elegant\", \"#2E2E2E\"],\r\n      \"Normalization\" : [\"stylish\", \"#4B515D\"],\r\n      \"Noise\" : [\"unique\", \"#3F729B\"]\r\n    }\r\n    var layerTypes = Object.keys(layersTypesToNodes);\r\n    var panelCards = [];\r\n    for (var i = 0; i < layerTypes.length; i++) {\r\n      var layerType = layerTypes[i];\r\n      var layerColor = \"unique\";\r\n      var layerColorHex = layerTypeToColor[layerType][1];\r\n      var headerColor = \"unique-color\";\r\n      var kerasNodes = layersTypesToNodes[layerType];\r\n      var nodes = [];\r\n      \r\n      for (var j = 0; j < kerasNodes.length; j++) {\r\n        if (kerasNodes[j].toLowerCase().indexOf(this.props.search.toLowerCase()) !== -1) {\r\n          nodes.push(<TrayItem \r\n            model={{ type: \"inout\", color: layerColorHex, name: kerasNodes[j] }} \r\n            name={ kerasNodes[j] }></TrayItem>);\r\n          nodes.push(<br />);\r\n        }\r\n      }\r\n      if (nodes.length > 0) {\r\n        panelCards.push(\r\n          <MDBCard \r\n            color=\"unique-color-dark\" \r\n            border={layerColor} \r\n            style={{ marginTop: \"1rem\" }} \r\n            className=\"text-center\">\r\n            \r\n            <MDBCardHeader color={headerColor}>{ layerType } Layers</MDBCardHeader>\r\n            <MDBCardBody> {nodes} </MDBCardBody>\r\n          </MDBCard>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"tray text-center\">\r\n        { panelCards }\r\n      </div>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\nimport { Nodes } from \"./Nodes\";\nimport { DefaultNodeModel, DiagramWidget } from \"storm-react-diagrams\";\nimport { MDBTooltip, MDBBtn, Navbar, NavbarBrand, NavbarNav, NavItem, FormInline, ModalHeader, Modal } from \"mdbreact\";\nimport * as SRD from \"storm-react-diagrams\";\nimport $ from \"jquery\";\nimport {\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBCard,\n  MDBCardBody,\n  MDBModalFooter,\n  MDBIcon,\n  MDBCardHeader,\n  MDBInput\n} from \"mdbreact\";\n\nimport layersToArgDefaults from '../properties/layer_defaults.json';\nimport layersToArgs from '../properties/layers.json';\nimport argsOptions from '../properties/options.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nArray.prototype.insert = function (index, item) {\n  this.splice(index, 0, item);\n};\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n      diagramEngine: new SRD.DiagramEngine(),\n\n      argsPanel: false,\n      selectedNode: undefined\n    };\n    this.state.diagramEngine.installDefaultFactories();\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.getArgOptions = this.getArgOptions.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  compileGraph() {\n    var nodes = this.state.diagramEngine.diagramModel.nodes;\n    var nodeIds = Object.keys(nodes);\n    \n    var nodeProperties = [];\n    for (var i = 0; i < nodeIds.length; i++) {\n      var node = nodes[nodeIds[i]];\n      var property = {\n        name : node.name,\n        args : node.args\n      }\n\n      nodeProperties.push(property);\n    }\n\n    var edges = this.state.diagramEngine.diagramModel.links;\n    var edgeIds = Object.keys(edges);\n    var fixedEdges = [];\n    for (i = 0; i < edgeIds.length; i++) {\n      // editor allows you to draw unterminated edges, which we ignore for the graph\n      if (edges[edgeIds[i]].targetPort == null) {\n        continue;\n      }\n\n      // editor allows drawing edges from in -> out or out -> in, so we account for both\n      var srcLabel = edges[edgeIds[i]].sourcePort.label;\n      var src, dst;\n      if (srcLabel === \"In\") {\n        src = edges[edgeIds[i]].sourcePort.parent.id;\n        dst = edges[edgeIds[i]].targetPort.parent.id;\n      } else {\n        src = edges[edgeIds[i]].targetPort.parent.id;\n        dst = edges[edgeIds[i]].sourcePort.parent.id;\n      }\n\n      fixedEdges.push([src, dst]);\n    }\n\n    var graph = {\n      nodes : nodeIds,\n      nodeProps : nodeProperties,\n      edges : fixedEdges,\n    }\n    return graph;\n  }\n\n  toggle() {\n    this.setState({\n      selectedNode: undefined,\n      argsPanel: !this.state.argsPanel\n    });\n  }\n\n  handleSearch(event) {\n    this.setState({search: event.target.value});\n  }\n\n  handleClick(e) {\n    // really jank way of getting around the fact this is buried in the storm-diagrams\n    var selectedNodes = document.getElementsByClassName(\"srd-node--selected\");\n    if (selectedNodes.length === 1) {\n      if (this.state.selectedNode == undefined) {\n        var nodeId = selectedNodes[0].getAttribute(\"data-nodeid\");\n        var node = this.state.diagramEngine.diagramModel.nodes[nodeId];\n        this.setState({\n          selectedNode : node,\n          argsPanel : true\n        })\n      }\n    } \n  }\n\n  handleChange(event) {\n    var updatedSelectedNode = this.state.selectedNode;\n    updatedSelectedNode.args[event.target.name].value = event.target.value;\n    this.setState({ selectedNode : updatedSelectedNode });\n  }\n\n  getArgOptions(description) {\n    var fieldsWithOptions = Object.keys(argsOptions);\n    var discreteOptionField = false;\n    var options = [];\n    for (var j = 0; j < fieldsWithOptions.length; j++) {\n      var field = fieldsWithOptions[j];\n      var lowerDescription = description.toLowerCase();\n      if (lowerDescription.indexOf(field) !== -1) {\n        options = Object.keys(argsOptions[field]);\n        discreteOptionField = true;\n      }\n      \n      if (discreteOptionField) {\n        break;\n      }\n    }\n    return options;\n  }\n\n  render() {\n    var argFields = [];\n    if (this.state.selectedNode !== undefined) {\n      var selectedNodeArgs = Object.keys(this.state.selectedNode.args);\n      for (var i = 0; i < selectedNodeArgs.length; i++) {\n        var arg = this.state.selectedNode.args[selectedNodeArgs[i]];\n\n        var fieldsWithOptions = Object.keys(argsOptions);\n        var discreteOptionField = false;\n        var content;\n\n        if (arg.options.length > 0) {\n          var options = [];\n          for (var j = 0; j < arg.options.length; j++) {\n            options.push(<option value={ arg.options[j] }>{ arg.options[j] }</option>)\n          }\n\n          content = <select \n              name={ selectedNodeArgs[i] } \n              value={ arg.value } \n              onChange={ this.handleChange }\n              required={ arg.required } >\n            { options }\n          </select>;\n        } else {\n          var inputType = \"text\";\n          if (arg.description.indexOf(\"float\") != -1 ||\n              arg.description.indexOf(\"integer\") != -1 ||\n              arg.description.indexOf(\"number\") != -1) {\n            inputType = \"number\";\n          }\n          content = <input\n            type={ inputType }\n            name={ selectedNodeArgs[i] } \n            value={ arg.value } \n            onChange={ this.handleChange } \n            required={ true } />\n        }\n\n        argFields.push(<div>\n            <MDBTooltip\n              placement=\"bottom\"\n              tooltipContent={ arg.description }>\n              { selectedNodeArgs[i] } : { content } <br />\n            </MDBTooltip> \n          </div>)\n      }\n    }\n\n    return (\n      <div onClick={this.handleClick}>\n        <Navbar color=\"unique-color-dark\">\n          <NavbarBrand>\n            <strong className=\"white-text\">NeuroSketch</strong>\n          </NavbarBrand>\n\n          <NavbarNav left>\n            <NavItem>\n              <FormInline waves>\n                <div className=\"md-form my-0\">\n                  <input \n                    className=\"form-control mr-sm-2\"\n                    placeholder=\"Search\" \n                    value={this.state.search}\n                    type=\"text\" \n                    onChange={this.handleSearch} />\n                </div>\n              </FormInline>\n            </NavItem>\n          </NavbarNav>\n\n          <NavbarNav right>\n            <NavItem>\n              <MDBBtn outline onClick={() => {\n                $.ajax({\n                  url:\"compile\", \n                  type: \"post\",\n                  dataType: 'json',\n                  data: JSON.stringify(this.compileGraph())\n                });\n              }}>\n                Compile\n              </MDBBtn>\n\n              <MDBBtn outline>Load Model</MDBBtn>\n            </NavItem>\n          </NavbarNav>\n        </Navbar>\n\n        <div className=\"body\">\n          <div className=\"content\">\n            <Nodes search={ this.state.search } />\n            <div\n              className=\"diagram-layer\"\n              onDrop={event => {\n                var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n                var node = new DefaultNodeModel(data.name, data.color);\n                if (data.type === \"in\") {\n                  node.addInPort(\"In\");\n                } else if (data.type === \"out\") {\n                  node.addOutPort(\"Out\");\n                } else {\n                  node.addInPort(\"In\");\n                  node.addOutPort(\"Out\");\n                }\n\n                var points = this.state.diagramEngine.getRelativeMousePoint(event);\n\n                var argDescriptions = layersToArgs[data.name];\n                var argsToDefault = layersToArgDefaults[data.name];\n                var args = Object.keys(argsToDefault);\n\n                node.args = {};\n\n                // argsSplit[0] contains all the required arguments for the layer\n                for (var i = 0; i < args.length; i++) {\n                  var arg = args[i];\n                  var description = argDescriptions[arg];\n                  \n                  var defaultValue = argsToDefault[arg];\n                  var options = this.getArgOptions(description);\n\n                  if (defaultValue == \"None\") {\n                    options.insert(0, defaultValue);\n                  }\n\n                  node.args[arg] = {\n                    description: description,\n                    required: defaultValue == \"\", // required args don't have default\n                    value: defaultValue,\n                    options: options\n                  };\n                }\n                \n                node.x = points.x;\n                node.y = points.y;\n                this.state.diagramEngine\n                  .getDiagramModel()\n                  .addNode(node);\n                this.forceUpdate();\n              }}\n              onDragOver={event => {\n                event.preventDefault();\n              }}\n            >\n              <DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.state.diagramEngine} />\n            </div>\n          </div>\n        </div>\n\n        <Modal isOpen={ this.state.argsPanel } toggle={() => this.toggle()} fullHeight position=\"right\">\n          <MDBRow>\n            <MDBCol md=\"12\">\n              <MDBCard>\n                <MDBCardBody>\n                  <form>\n                    <div className=\"grey-text\">\n                      { argFields }\n                    </div>\n                  </form>\n                </MDBCardBody>\n\n                <MDBModalFooter>\n                  <MDBBtn className=\"mb-6\"> Save </MDBBtn>\n                  <MDBBtn className=\"mb-6\" onClick={ this.toggle }> Close </MDBBtn>\n                </MDBModalFooter>\n              </MDBCard>\n            </MDBCol>\n          </MDBRow>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport { App } from \"./components/App\";\n\nimport \"./sass/main.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}