{"version":3,"sources":["components/TrayItem.jsx","components/Nodes.jsx","components/App.jsx","index.js"],"names":["TrayItem","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_this2","react","mdbreact","outline","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","React","Nodes","layersTypesToNodes","Core","Convolutional","Pooling","Locally-Connected","Recurrent","Embedding","Merge","Activation","Normalization","Noise","layerTypeToColor","layerTypes","keys","panelCards","i","length","layerType","layerColorHex","kerasNodes","nodes","j","push","TrayItem_TrayItem","type","color","border","style","marginTop","className","App","diagramEngine","SRD","installDefaultFactories","diagramModel","nodeIds","nodeProperties","edges","links","edgeIds","fixedEdges","src","dst","targetPort","sourcePort","label","parent","id","nodeProps","left","waves","placeholder","aria-label","right","onClick","$","ajax","url","dataType","data","compileGraph","Nodes_Nodes","onDrop","parse","getData","node","DefaultNodeModel","addInPort","addOutPort","points","getRelativeMousePoint","x","y","getDiagramModel","addNode","forceUpdate","onDragOver","preventDefault","main","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.f6a22269.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { MDBBtn } from \"mdbreact\";\n\nexport class TrayItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <MDBBtn outline\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n        }}\n      >\n        {this.props.name}\n      </MDBBtn>\n    );\n  }\n}\n","import * as React from \"react\";\r\nimport { TrayItem } from \"./TrayItem\";\r\nimport { MDBCard, MDBCardHeader, MDBCardBody } from \"mdbreact\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Nodes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const layersTypesToNodes = {\r\n      \"Core\" : [\r\n        \"Dense\",\r\n        \"Activation\",\r\n        \"Dropout\",\r\n        \"Flatten\",\r\n        \"Input\",\r\n        \"Reshape\",\r\n        \"Permute\",\r\n        \"RepeatVector\",\r\n        \"Lambda\",\r\n        \"ActivityRegularization\",\r\n        \"Masking\",\r\n        \"SpatialDropout1D\",\r\n        \"SpatialDropout2D\",\r\n        \"SpatialDropout3D\"\r\n      ],\r\n       \"Convolutional\" : [\r\n        \"Conv1D\",\r\n        \"Conv2D\",\r\n        \"Conv3D\",\r\n        \"SeparableConv1D\",\r\n        \"SeparableConv2D\",\r\n        \"DepthwiseConv2D\",\r\n        \"Conv2DTranspose\",\r\n        \"Conv3DTranspose\",\r\n        \"Cropping1D\",\r\n        \"Cropping2D\",\r\n        \"Cropping3D\",\r\n        \"UpSampling1D\",\r\n        \"UpSampling2D\",\r\n        \"UpSampling3D\",\r\n        \"ZeroPadding1D\",\r\n        \"ZeroPadding2D\",\r\n        \"ZeroPadding3D\"\r\n      ],\r\n       \"Pooling\" : [\r\n        \"MaxPooling1D\",\r\n        \"MaxPooling2D\",\r\n        \"MaxPooling3D\",\r\n        \"AveragePooling1D\",\r\n        \"AveragePooling2D\",\r\n        \"AveragePooling3D\",\r\n        \"GlobalMaxPooling1D\",\r\n        \"GlobalMaxPooling2D\",\r\n        \"GlobalMaxPooling3D\",\r\n        \"GlobalAveragePooling1D\",\r\n        \"GlobalAveragePooling2D\",\r\n        \"GlobalAveragePooling3D\"\r\n      ],\r\n       \"Locally-Connected\" : [\r\n        \"LocallyConnected1D\",\r\n        \"LocallyConnected2D\"\r\n      ],\r\n       \"Recurrent\" : [\r\n        \"RNN\",\r\n        \"SimpleRNN\",\r\n        \"SimpleRNNCell\",\r\n        \"GRU\",\r\n        \"GRUCell\",\r\n        \"LSTM\",\r\n        \"LSTMCell\",\r\n        \"ConvLSTM2D\",\r\n        \"CuDNNGRU\",\r\n        \"CuDNNLSTM\"\r\n      ],\r\n       \"Embedding\" : [\r\n        \"Embedding\"\r\n      ],\r\n       \"Merge\" : [\r\n        \"Add\",\r\n        \"Subtract\",\r\n        \"Multiply\",\r\n        \"Average\",\r\n        \"Maximum\",\r\n        \"Concatenate\",\r\n        \"Dot\"\r\n      ],\r\n       \"Activation\" : [\r\n        \"LeakyReLU\",\r\n        \"PReLU\",\r\n        \"ReLU\",\r\n        \"ELU\",\r\n        \"ThresholdedReLU\",\r\n        \"Softmax\"\r\n      ],\r\n       \"Normalization\" : [\r\n        \"BatchNormalization\"\r\n      ],\r\n       \"Noise\" : [\r\n        \"GaussianNoise\",\r\n        \"GaussianDropout\",\r\n        \"AlphaDropout\"\r\n      ]\r\n    }\r\n     var layerTypeToColor = {\r\n      \"Core\" : [\"danger\", \"#ff4444\"],\r\n      \"Convolutional\" : [\"warning\", \"#ffbb33\"],\r\n      \"Pooling\" : [\"success\", \"#00C851\"],\r\n      \"Locally-Connected\" : [\"info\", \"#33b5e5\"],\r\n      \"Recurrent\" : [\"default\", \"#2BBBAD\"],\r\n      \"Embedding\" : [\"primary\", \"#4285F4\"],\r\n      \"Merge\" : [\"secondary\", \"#aa66cc\"],\r\n      \"Activation\" : [\"elegant\", \"#2E2E2E\"],\r\n      \"Normalization\" : [\"stylish\", \"#4B515D\"],\r\n      \"Noise\" : [\"unique\", \"#3F729B\"]\r\n    }\r\n    var layerTypes = Object.keys(layersTypesToNodes);\r\n    var panelCards = [];\r\n    for (var i = 0; i < layerTypes.length; i++) {\r\n      var layerType = layerTypes[i];\r\n      var layerColor = \"unique\";\r\n      var layerColorHex = layerTypeToColor[layerType][1];\r\n      var headerColor = \"unique-color\";\r\n      var kerasNodes = layersTypesToNodes[layerType];\r\n      var nodes = [];\r\n      \r\n      for (var j = 0; j < kerasNodes.length; j++) {\r\n        nodes.push(<TrayItem \r\n          model={{ type: \"inout\", color: layerColorHex, name: kerasNodes[j] }} \r\n          name={ kerasNodes[j] }></TrayItem>);\r\n        nodes.push(<br />);\r\n      }\r\n      panelCards.push(\r\n        <MDBCard color=\"unique-color-dark\" border={layerColor} style={{ marginTop: \"1rem\" }} className=\"text-center\">\r\n          <MDBCardHeader color={headerColor}>{ layerType } Layers</MDBCardHeader>\r\n          <MDBCardBody> {nodes} </MDBCardBody>\r\n        </MDBCard>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"tray text-center\">\r\n        { panelCards }\r\n      </div>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\nimport { Nodes } from \"./Nodes\";\nimport { DefaultNodeModel, DiagramWidget } from \"storm-react-diagrams\";\nimport { MDBBtn, Navbar, NavbarBrand, NavbarNav, NavItem, FormInline } from \"mdbreact\";\nimport * as SRD from \"storm-react-diagrams\";\nimport $ from \"jquery\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n/**\n * @author Dylan Vorster\n */\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      diagramEngine: new SRD.DiagramEngine()\n    };\n    this.state.diagramEngine.installDefaultFactories();\n  }\n\n  compileGraph() {\n    var nodes = this.state.diagramEngine.diagramModel.nodes;\n    var nodeIds = Object.keys(nodes);\n    \n    var nodeProperties = [];\n    for (var i = 0; i < nodeIds.length; i++) {\n      nodeProperties.push(nodes[nodeIds[i]].name);\n    }\n\n    var edges = this.state.diagramEngine.diagramModel.links;\n    var edgeIds = Object.keys(edges);\n    var fixedEdges = [];\n    for (i = 0; i < edgeIds.length; i++) {\n      // editor allows you to draw unterminated edges, which we ignore for the graph\n      if (edges[edgeIds[i]].targetPort == null) {\n        continue;\n      }\n\n      // editor allows drawing edges from in -> out or out -> in, so we account for both\n      var srcLabel = edges[edgeIds[i]].sourcePort.label;\n      var src, dst;\n      if (srcLabel === \"In\") {\n        src = edges[edgeIds[i]].sourcePort.parent.id;\n        dst = edges[edgeIds[i]].targetPort.parent.id;\n      } else {\n        src = edges[edgeIds[i]].targetPort.parent.id;\n        dst = edges[edgeIds[i]].sourcePort.parent.id;\n      }\n\n      fixedEdges.push([src, dst]);\n    }\n    \n    var graph = {\n      nodes : nodeIds,\n      nodeProps : nodeProperties,\n      edges : fixedEdges,\n    }\n    return graph;\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"unique-color-dark\">\n          <NavbarBrand>\n            <strong className=\"white-text\">NeuroSketch</strong>\n          </NavbarBrand>\n\n          <NavbarNav left>\n            <NavItem>\n              <FormInline waves>\n                <div className=\"md-form my-0\">\n                  <input\n                    className=\"form-control mr-sm-2\"\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    aria-label=\"Search\"\n                  />\n                </div>\n              </FormInline>\n            </NavItem>\n          </NavbarNav>\n\n          <NavbarNav right>\n            <NavItem>\n              <MDBBtn outline onClick={() => {\n                $.ajax({\n                  url:\"compile\", \n                  type: \"post\",\n                  dataType: 'json',\n                  data: JSON.stringify(this.compileGraph())\n                });\n              }}>\n                Compile\n              </MDBBtn>\n            </NavItem>\n          </NavbarNav>\n        </Navbar>\n\n        <div className=\"body\">\n          <div className=\"content\">\n            <Nodes />\n            <div\n              className=\"diagram-layer\"\n              onDrop={event => {\n                var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n                var node = new DefaultNodeModel(data.name, data.color);\n                if (data.type === \"in\") {\n                  node.addInPort(\"In\");\n                } else if (data.type === \"out\") {\n                  node.addOutPort(\"Out\");\n                } else {\n                  node.addInPort(\"In\");\n                  node.addOutPort(\"Out\");\n                }\n\n                var points = this.state.diagramEngine.getRelativeMousePoint(event);\n                node.x = points.x;\n                node.y = points.y;\n                this.state.diagramEngine\n                  .getDiagramModel()\n                  .addNode(node);\n                this.forceUpdate();\n              }}\n              onDragOver={event => {\n                event.preventDefault();\n              }}\n            >\n              <DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.state.diagramEngine} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport { App } from \"./components/App\";\n\nimport \"./sass/main.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}