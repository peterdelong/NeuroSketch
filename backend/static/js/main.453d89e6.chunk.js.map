{"version":3,"sources":["components/TrayItem.jsx","components/Nodes.jsx","components/App.jsx","index.js"],"names":["TrayItem","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_this2","react","mdbreact","outline","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","React","Nodes","layersTypesToNodes","Core","Convolutional","Pooling","Locally-Connected","Recurrent","Embedding","Merge","Activation","Normalization","Noise","layerTypeToColor","layerTypes","keys","panelCards","i","length","layerType","layerColorHex","kerasNodes","nodes","j","toLowerCase","indexOf","search","push","TrayItem_TrayItem","type","color","border","style","marginTop","className","App","diagramEngine","SRD","argsPanel","selectedNodeType","selectedNodeArgs","selectedNodeNumRequiredArgs","selectedNodeArgsDescriptions","installDefaultFactories","handleChange","bind","assertThisInitialized","toggle","handleClick","diagramModel","nodeIds","nodeProperties","edges","links","edgeIds","fixedEdges","src","dst","targetPort","sourcePort","label","parent","id","nodeProps","setState","selectedNodeId","target","e","selectedNodes","document","getElementsByClassName","nodeType","innerText","split","argDescriptions","layersToArgs","argsSplit","layersToArgSplit","numRequiredArgs","concat","argFields","content","fieldsWithOptions","argsOptions","discreteOptionField","description","field","lowerDescription","defaultInstance","substr","trim","options","optionFields","placement","tooltipContent","onClick","left","waves","placeholder","onChange","right","$","ajax","url","dataType","data","compileGraph","Nodes_Nodes","onDrop","parse","getData","node","DefaultNodeModel","addInPort","addOutPort","points","getRelativeMousePoint","x","y","getDiagramModel","addNode","forceUpdate","onDragOver","preventDefault","main","isOpen","fullHeight","position","ReactDOM","render","App_App","getElementById"],"mappings":"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","file":"static/js/main.453d89e6.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { MDBBtn } from \"mdbreact\";\n\nexport class TrayItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <MDBBtn outline\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n        }}\n      >\n        {this.props.name}\n      </MDBBtn>\n    );\n  }\n}\n","import * as React from \"react\";\r\nimport { TrayItem } from \"./TrayItem\";\r\nimport { MDBCard, MDBCardHeader, MDBCardBody } from \"mdbreact\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Nodes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const layersTypesToNodes = {\r\n      \"Core\" : [\r\n        \"Dense\",\r\n        \"Activation\",\r\n        \"Dropout\",\r\n        \"Flatten\",\r\n        \"Input\",\r\n        \"Reshape\",\r\n        \"Permute\",\r\n        \"RepeatVector\",\r\n        \"Lambda\",\r\n        \"ActivityRegularization\",\r\n        \"Masking\",\r\n        \"SpatialDropout1D\",\r\n        \"SpatialDropout2D\",\r\n        \"SpatialDropout3D\"\r\n      ],\r\n       \"Convolutional\" : [\r\n        \"Conv1D\",\r\n        \"Conv2D\",\r\n        \"Conv3D\",\r\n        \"SeparableConv1D\",\r\n        \"SeparableConv2D\",\r\n        \"DepthwiseConv2D\",\r\n        \"Conv2DTranspose\",\r\n        \"Conv3DTranspose\",\r\n        \"Cropping1D\",\r\n        \"Cropping2D\",\r\n        \"Cropping3D\",\r\n        \"UpSampling1D\",\r\n        \"UpSampling2D\",\r\n        \"UpSampling3D\",\r\n        \"ZeroPadding1D\",\r\n        \"ZeroPadding2D\",\r\n        \"ZeroPadding3D\"\r\n      ],\r\n       \"Pooling\" : [\r\n        \"MaxPooling1D\",\r\n        \"MaxPooling2D\",\r\n        \"MaxPooling3D\",\r\n        \"AveragePooling1D\",\r\n        \"AveragePooling2D\",\r\n        \"AveragePooling3D\",\r\n        \"GlobalMaxPooling1D\",\r\n        \"GlobalMaxPooling2D\",\r\n        \"GlobalMaxPooling3D\",\r\n        \"GlobalAveragePooling1D\",\r\n        \"GlobalAveragePooling2D\",\r\n        \"GlobalAveragePooling3D\"\r\n      ],\r\n       \"Locally-Connected\" : [\r\n        \"LocallyConnected1D\",\r\n        \"LocallyConnected2D\"\r\n      ],\r\n       \"Recurrent\" : [\r\n        \"RNN\",\r\n        \"SimpleRNN\",\r\n        \"SimpleRNNCell\",\r\n        \"GRU\",\r\n        \"GRUCell\",\r\n        \"LSTM\",\r\n        \"LSTMCell\",\r\n        \"ConvLSTM2D\",\r\n        \"CuDNNGRU\",\r\n        \"CuDNNLSTM\"\r\n      ],\r\n       \"Embedding\" : [\r\n        \"Embedding\"\r\n      ],\r\n       \"Merge\" : [\r\n        \"Add\",\r\n        \"Subtract\",\r\n        \"Multiply\",\r\n        \"Average\",\r\n        \"Maximum\",\r\n        \"Concatenate\",\r\n        \"Dot\"\r\n      ],\r\n       \"Activation\" : [\r\n        \"LeakyReLU\",\r\n        \"PReLU\",\r\n        \"ReLU\",\r\n        \"ELU\",\r\n        \"ThresholdedReLU\",\r\n        \"Softmax\"\r\n      ],\r\n       \"Normalization\" : [\r\n        \"BatchNormalization\"\r\n      ],\r\n       \"Noise\" : [\r\n        \"GaussianNoise\",\r\n        \"GaussianDropout\",\r\n        \"AlphaDropout\"\r\n      ]\r\n    }\r\n\r\n    var layerTypeToColor = {\r\n      \"Core\" : [\"danger\", \"#ff4444\"],\r\n      \"Convolutional\" : [\"warning\", \"#ffbb33\"],\r\n      \"Pooling\" : [\"success\", \"#00C851\"],\r\n      \"Locally-Connected\" : [\"info\", \"#33b5e5\"],\r\n      \"Recurrent\" : [\"default\", \"#2BBBAD\"],\r\n      \"Embedding\" : [\"primary\", \"#4285F4\"],\r\n      \"Merge\" : [\"secondary\", \"#aa66cc\"],\r\n      \"Activation\" : [\"elegant\", \"#2E2E2E\"],\r\n      \"Normalization\" : [\"stylish\", \"#4B515D\"],\r\n      \"Noise\" : [\"unique\", \"#3F729B\"]\r\n    }\r\n    var layerTypes = Object.keys(layersTypesToNodes);\r\n    var panelCards = [];\r\n    for (var i = 0; i < layerTypes.length; i++) {\r\n      var layerType = layerTypes[i];\r\n      var layerColor = \"unique\";\r\n      var layerColorHex = layerTypeToColor[layerType][1];\r\n      var headerColor = \"unique-color\";\r\n      var kerasNodes = layersTypesToNodes[layerType];\r\n      var nodes = [];\r\n      \r\n      for (var j = 0; j < kerasNodes.length; j++) {\r\n        if (kerasNodes[j].toLowerCase().indexOf(this.props.search.toLowerCase()) !== -1) {\r\n          nodes.push(<TrayItem \r\n            model={{ type: \"inout\", color: layerColorHex, name: kerasNodes[j] }} \r\n            name={ kerasNodes[j] }></TrayItem>);\r\n          nodes.push(<br />);\r\n        }\r\n      }\r\n      if (nodes.length > 0) {\r\n        panelCards.push(\r\n          <MDBCard \r\n            color=\"unique-color-dark\" \r\n            border={layerColor} \r\n            style={{ marginTop: \"1rem\" }} \r\n            className=\"text-center\">\r\n            \r\n            <MDBCardHeader color={headerColor}>{ layerType } Layers</MDBCardHeader>\r\n            <MDBCardBody> {nodes} </MDBCardBody>\r\n          </MDBCard>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"tray text-center\">\r\n        { panelCards }\r\n      </div>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\nimport { Nodes } from \"./Nodes\";\nimport { DefaultNodeModel, DiagramWidget } from \"storm-react-diagrams\";\nimport { MDBTooltip, MDBBtn, Navbar, NavbarBrand, NavbarNav, NavItem, FormInline, ModalHeader, Modal } from \"mdbreact\";\nimport * as SRD from \"storm-react-diagrams\";\nimport $ from \"jquery\";\n\nimport layersToArgSplit from '../properties/arg_split.json';\nimport layersToArgs from '../properties/layers.json';\nimport argsOptions from '../properties/options.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n/**\n * @author Dylan Vorster\n */\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n      diagramEngine: new SRD.DiagramEngine(),\n\n      argsPanel: false,\n      selectedNodeType: \"\",\n      selectedNodeArgs: \"\",\n      selectedNodeNumRequiredArgs: 0,\n      selectedNodeArgsDescriptions: \"\"\n    };\n    this.state.diagramEngine.installDefaultFactories();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  compileGraph() {\n    var nodes = this.state.diagramEngine.diagramModel.nodes;\n    var nodeIds = Object.keys(nodes);\n    \n    var nodeProperties = [];\n    for (var i = 0; i < nodeIds.length; i++) {\n      nodeProperties.push(nodes[nodeIds[i]].name);\n    }\n\n    var edges = this.state.diagramEngine.diagramModel.links;\n    var edgeIds = Object.keys(edges);\n    var fixedEdges = [];\n    for (i = 0; i < edgeIds.length; i++) {\n      // editor allows you to draw unterminated edges, which we ignore for the graph\n      if (edges[edgeIds[i]].targetPort == null) {\n        continue;\n      }\n\n      // editor allows drawing edges from in -> out or out -> in, so we account for both\n      var srcLabel = edges[edgeIds[i]].sourcePort.label;\n      var src, dst;\n      if (srcLabel === \"In\") {\n        src = edges[edgeIds[i]].sourcePort.parent.id;\n        dst = edges[edgeIds[i]].targetPort.parent.id;\n      } else {\n        src = edges[edgeIds[i]].targetPort.parent.id;\n        dst = edges[edgeIds[i]].sourcePort.parent.id;\n      }\n\n      fixedEdges.push([src, dst]);\n    }\n    \n    var graph = {\n      nodes : nodeIds,\n      nodeProps : nodeProperties,\n      edges : fixedEdges,\n    }\n    return graph;\n  }\n\n  toggle() {\n    this.setState({\n      selectedNodeId: \"\",\n      argsPanel: !this.state.argsPanel\n    });\n  }\n\n  handleChange(event) {\n    this.setState({search: event.target.value});\n  }\n\n  handleClick(e) {\n    // really jank way of getting around the fact this is buried in the storm-diagrams\n    var selectedNodes = document.getElementsByClassName(\"srd-node--selected\");\n    if (selectedNodes.length === 1) {\n      if (!this.state.argsPanel) {\n        var nodeType = selectedNodes[0].innerText.split(\"\\n\")[0];\n        var argDescriptions = layersToArgs[nodeType];\n\n        var argsSplit = layersToArgSplit[nodeType];\n        var numRequiredArgs = argsSplit[0].length;\n        var selectedNodeArgs = argsSplit[0].concat(argsSplit[1]);\n\n        this.setState({\n          selectedNodeType: nodeType,\n          selectedNodeArgs: selectedNodeArgs,\n          selectedNodeNumRequiredArgs : numRequiredArgs,\n          selectedNodeArgsDescriptions: argDescriptions,\n          argsPanel: true\n        });\n      } \n    } \n  }\n\n  render() {\n    var argFields = [];\n\n    argFields.push(<h3>Required</h3>);\n    for (var i = 0; i < this.state.selectedNodeArgs.length; i++) {\n      var fieldsWithOptions = Object.keys(argsOptions);\n      var discreteOptionField = false;\n      var content;\n\n      var nodeType = this.state.selectedNodeArgs[i];\n      var description = this.state.selectedNodeArgsDescriptions[nodeType];\n\n      for (var j = 0; j < fieldsWithOptions.length; j++) {\n        var field = fieldsWithOptions[j];\n        var lowerDescription = description.toLowerCase();\n        if (lowerDescription.indexOf(field) !== -1) {\n          var defaultInstance = lowerDescription.indexOf(\"default\");\n          if (defaultInstance !== -1) {\n            var uncleanDefaultValue = lowerDescription.substr(defaultInstance).trim();\n            var defaultValue = uncleanDefaultValue.split(\" \")[0];\n          }\n\n          var options = Object.keys(argsOptions[field]);\n          var optionFields = [];\n          for (var j = 0; j < options.length; j++) {\n            optionFields.push(<option value={ options[j] }>{ options[j] }</option>)\n          }\n\n          content = <select>{ optionFields }</select>;\n          discreteOptionField = true;\n        }\n        \n        if (discreteOptionField) {\n          break;\n        }\n      }\n\n      if (!discreteOptionField) {\n        content = <input className=\"form-control mr-sm-2\"type=\"text\" />\n      }\n\n      argFields.push(<div>\n          <MDBTooltip\n            placement=\"bottom\"\n            tooltipContent={ description }>\n            { nodeType } : { content } <br />\n          </MDBTooltip> \n        </div>)\n\n      if (i == this.state.selectedNodeNumRequiredArgs) {\n        argFields.push(<hr />);\n        argFields.push(<h3>Optional</h3>);\n      }\n    }\n\n    return (\n      <div onClick={this.handleClick}>\n        <Navbar color=\"unique-color-dark\">\n          <NavbarBrand>\n            <strong className=\"white-text\">NeuroSketch</strong>\n          </NavbarBrand>\n\n          <NavbarNav left>\n            <NavItem>\n              <FormInline waves>\n                <div className=\"md-form my-0\">\n                  <input \n                    className=\"form-control mr-sm-2\"\n                    placeholder=\"Search\" \n                    value={this.state.search}\n                    type=\"text\" \n                    onChange={this.handleChange} />\n                </div>\n              </FormInline>\n            </NavItem>\n          </NavbarNav>\n\n          <NavbarNav right>\n            <NavItem>\n              <MDBBtn outline onClick={() => {\n                $.ajax({\n                  url:\"compile\", \n                  type: \"post\",\n                  dataType: 'json',\n                  data: JSON.stringify(this.compileGraph())\n                });\n              }}>\n                Compile\n              </MDBBtn>\n            </NavItem>\n          </NavbarNav>\n        </Navbar>\n\n        <div className=\"body\">\n          <div className=\"content\">\n            <Nodes search={ this.state.search } />\n            <div\n              className=\"diagram-layer\"\n              onDrop={event => {\n                var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n                var node = new DefaultNodeModel(data.name, data.color);\n                if (data.type === \"in\") {\n                  node.addInPort(\"In\");\n                } else if (data.type === \"out\") {\n                  node.addOutPort(\"Out\");\n                } else {\n                  node.addInPort(\"In\");\n                  node.addOutPort(\"Out\");\n                }\n\n                var points = this.state.diagramEngine.getRelativeMousePoint(event);\n                node.x = points.x;\n                node.y = points.y;\n                this.state.diagramEngine\n                  .getDiagramModel()\n                  .addNode(node);\n                this.forceUpdate();\n              }}\n              onDragOver={event => {\n                event.preventDefault();\n              }}\n            >\n              <DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.state.diagramEngine} />\n            </div>\n          </div>\n        </div>\n\n        <Modal isOpen={ this.state.argsPanel } toggle={() => this.toggle()} fullHeight position=\"right\">\n          <ModalHeader toggle={() => this.toggle()}>{ this.state.selectedNodeType }</ModalHeader>\n          <FormInline waves>\n            <div className=\"md-form my-0\">\n              { argFields }\n            </div>\n          </FormInline>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport { App } from \"./components/App\";\n\nimport \"./sass/main.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}