{"version":3,"sources":["components/TrayItem.jsx","components/Nodes.jsx","components/App.jsx","index.js"],"names":["TrayItem","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_this2","react","mdbreact","outline","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","name","React","Nodes","layersTypesToNodes","Core","Convolutional","Pooling","Locally-Connected","Recurrent","Embedding","Merge","Activation","Normalization","Noise","layerTypeToColor","layerTypes","keys","panelCards","i","length","layerType","layerColor","layerColorHex","headerColor","kerasNodes","nodes","j","push","TrayItem_TrayItem","type","color","border","style","width","marginTop","className","App","diagramEngine","SRD","installDefaultFactories","graph","Graph","diagramModel","addNode","edges","links","edgeIds","src","dst","targetPort","sourcePort","label","id","addEdge","dark","expand","Nodes_Nodes","onDrop","data","parse","getData","node","DefaultNodeModel","addInPort","addOutPort","points","getRelativeMousePoint","x","y","getDiagramModel","forceUpdate","onDragOver","preventDefault","main","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.67276d3e.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { MDBBtn } from \"mdbreact\";\n\nexport class TrayItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <MDBBtn outline\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\"storm-diagram-node\", JSON.stringify(this.props.model));\n        }}\n      >\n        {this.props.name}\n      </MDBBtn>\n    );\n  }\n}\n","import * as React from \"react\";\r\nimport { TrayItem } from \"./TrayItem\";\r\nimport { MDBCard, MDBCardHeader, MDBCardBody } from \"mdbreact\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Nodes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const layersTypesToNodes = {\r\n      \"Core\" : [\r\n        \"Dense\",\r\n        \"Activation\",\r\n        \"Dropout\",\r\n        \"Flatten\",\r\n        \"Input\",\r\n        \"Reshape\",\r\n        \"Permute\",\r\n        \"RepeatVector\",\r\n        \"Lambda\",\r\n        \"ActivityRegularization\",\r\n        \"Masking\",\r\n        \"SpatialDropout1D\",\r\n        \"SpatialDropout2D\",\r\n        \"SpatialDropout3D\"\r\n      ],\r\n       \"Convolutional\" : [\r\n        \"Conv1D\",\r\n        \"Conv2D\",\r\n        \"Conv3D\",\r\n        \"SeparableConv1D\",\r\n        \"SeparableConv2D\",\r\n        \"DepthwiseConv2D\",\r\n        \"Conv2DTranspose\",\r\n        \"Conv3DTranspose\",\r\n        \"Cropping1D\",\r\n        \"Cropping2D\",\r\n        \"Cropping3D\",\r\n        \"UpSampling1D\",\r\n        \"UpSampling2D\",\r\n        \"UpSampling3D\",\r\n        \"ZeroPadding1D\",\r\n        \"ZeroPadding2D\",\r\n        \"ZeroPadding3D\"\r\n      ],\r\n       \"Pooling\" : [\r\n        \"MaxPooling1D\",\r\n        \"MaxPooling2D\",\r\n        \"MaxPooling3D\",\r\n        \"AveragePooling1D\",\r\n        \"AveragePooling2D\",\r\n        \"AveragePooling3D\",\r\n        \"GlobalMaxPooling1D\",\r\n        \"GlobalMaxPooling2D\",\r\n        \"GlobalMaxPooling3D\",\r\n        \"GlobalAveragePooling1D\",\r\n        \"GlobalAveragePooling2D\",\r\n        \"GlobalAveragePooling3D\"\r\n      ],\r\n       \"Locally-Connected\" : [\r\n        \"LocallyConnected1D\",\r\n        \"LocallyConnected2D\"\r\n      ],\r\n       \"Recurrent\" : [\r\n        \"RNN\",\r\n        \"SimpleRNN\",\r\n        \"SimpleRNNCell\",\r\n        \"GRU\",\r\n        \"GRUCell\",\r\n        \"LSTM\",\r\n        \"LSTMCell\",\r\n        \"ConvLSTM2D\",\r\n        \"CuDNNGRU\",\r\n        \"CuDNNLSTM\"\r\n      ],\r\n       \"Embedding\" : [\r\n        \"Embedding\"\r\n      ],\r\n       \"Merge\" : [\r\n        \"Add\",\r\n        \"Subtract\",\r\n        \"Multiply\",\r\n        \"Average\",\r\n        \"Maximum\",\r\n        \"Concatenate\",\r\n        \"Dot\"\r\n      ],\r\n       \"Activation\" : [\r\n        \"LeakyReLU\",\r\n        \"PReLU\",\r\n        \"ReLU\",\r\n        \"ELU\",\r\n        \"ThresholdedReLU\",\r\n        \"Softmax\"\r\n      ],\r\n       \"Normalization\" : [\r\n        \"BatchNormalization\"\r\n      ],\r\n       \"Noise\" : [\r\n        \"GaussianNoise\",\r\n        \"GaussianDropout\",\r\n        \"AlphaDropout\"\r\n      ]\r\n    }\r\n     var layerTypeToColor = {\r\n      \"Core\" : [\"danger\", \"#ff4444\"],\r\n      \"Convolutional\" : [\"warning\", \"#ffbb33\"],\r\n      \"Pooling\" : [\"success\", \"#00C851\"],\r\n      \"Locally-Connected\" : [\"info\", \"#33b5e5\"],\r\n      \"Recurrent\" : [\"default\", \"#2BBBAD\"],\r\n      \"Embedding\" : [\"primary\", \"#4285F4\"],\r\n      \"Merge\" : [\"secondary\", \"#aa66cc\"],\r\n      \"Activation\" : [\"elegant\", \"#2E2E2E\"],\r\n      \"Normalization\" : [\"stylish\", \"#4B515D\"],\r\n      \"Noise\" : [\"unique\", \"#3F729B\"]\r\n    }\r\n    var layerTypes = Object.keys(layersTypesToNodes);\r\n    var panelCards = [];\r\n    for (var i = 0; i < layerTypes.length; i++) {\r\n      var layerType = layerTypes[i];\r\n      var layerColor = layerTypeToColor[layerType][0];\r\n      var layerColorHex = layerTypeToColor[layerType][1];\r\n      var headerColor = layerColor + \"-color\";\r\n      var kerasNodes = layersTypesToNodes[layerType];\r\n      var nodes = [];\r\n      \r\n      for (var j = 0; j < kerasNodes.length; j++) {\r\n        nodes.push(<TrayItem \r\n          model={{ type: \"inout\", color: layerColorHex, name: kerasNodes[j] }} \r\n          name={ kerasNodes[j] }></TrayItem>);\r\n      }\r\n       panelCards.push(\r\n        <MDBCard color=\"special-color\" border={layerColor} style={{ width: \"22rem\", marginTop: \"1rem\" }} className=\"text-center\">\r\n          <MDBCardHeader color={headerColor}>{ layerType } Layers</MDBCardHeader>\r\n          <MDBCardBody> {nodes} </MDBCardBody>\r\n        </MDBCard>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"tray\">\r\n        { panelCards }\r\n      </div>\r\n    )\r\n  }\r\n}","import * as React from \"react\";\nimport { Nodes } from \"./Nodes\";\nimport { DefaultNodeModel, DiagramWidget } from \"storm-react-diagrams\";\nimport Graph from \"graph-data-structure\";\nimport { Navbar, NavbarBrand } from \"mdbreact\";\nimport * as SRD from \"storm-react-diagrams\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n/**\n * @author Dylan Vorster\n */\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      diagramEngine: new SRD.DiagramEngine()\n    };\n    this.state.diagramEngine.installDefaultFactories();\n  }\n\n  compileGraph() {\n    var graph = Graph();\n\n    var nodes = Object.keys(this.state.diagramEngine.diagramModel.nodes); \n    for (var i = 0; i < nodes.length; i++) {\n      graph.addNode(nodes[i]);\n    }\n\n    var edges = this.state.diagramEngine.diagramModel.links;\n    var edgeIds = Object.keys(edges);\n    for (i = 0; i < edgeIds.length; i++) {\n      // editor allows you to draw unterminated edges, which we ignore for the graph\n      if (edges[edgeIds[i]].targetPort == null) {\n        continue;\n      }\n\n      // editor allows drawing edges from in -> out or out -> in, so we account for both\n      var srcLabel = edges[edgeIds[i]].sourcePort.label;\n      var src, dst;\n      if (srcLabel == \"In\") {\n        src = edges[edgeIds[i]].sourcePort.id;\n        dst = edges[edgeIds[i]].targetPort.id;\n      } else {\n        src = edges[edgeIds[i]].targetPort.id;\n        dst = edges[edgeIds[i]].sourcePort.id;\n      }\n\n      graph.addEdge(src, dst);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"indigo\" dark expand=\"md\">\n          <NavbarBrand>\n            <strong className=\"white-text\">Navbar</strong>\n          </NavbarBrand>\n        </Navbar>\n\n        <div className=\"body\">\n          <div className=\"content\">\n            <Nodes />\n            <div\n              className=\"diagram-layer\"\n              onDrop={event => {\n                var data = JSON.parse(event.dataTransfer.getData(\"storm-diagram-node\"));\n                var node = new DefaultNodeModel(data.name, data.color);\n                if (data.type === \"in\") {\n                  node.addInPort(\"In\");\n                } else if (data.type === \"out\") {\n                  node.addOutPort(\"Out\");\n                } else {\n                  node.addInPort(\"In\");\n                  node.addOutPort(\"Out\");\n                }\n\n                var points = this.state.diagramEngine.getRelativeMousePoint(event);\n                node.x = points.x;\n                node.y = points.y;\n                this.state.diagramEngine\n                  .getDiagramModel()\n                  .addNode(node);\n                this.forceUpdate();\n              }}\n              onDragOver={event => {\n                event.preventDefault();\n              }}\n            >\n              <DiagramWidget className=\"srd-demo-canvas\" diagramEngine={this.state.diagramEngine} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport { App } from \"./components/App\";\n\nimport \"./sass/main.scss\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}